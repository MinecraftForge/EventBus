plugins {
    id 'java-library'
    id 'org.gradlex.extra-java-module-info'
    id 'net.minecraftforge.gradleutils'
    id 'net.minecraftforge.licenser'
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
}

license {
    header = rootProject.file("LICENSE-header.txt")
    newLine = false
}

dependencies {
    compileOnly(libs.nulls)

    implementation(rootProject)
    implementation(libs.bundles.asm) // Needed by ModLauncher
    implementation(libs.junit.api)
    implementation(libs.securemodules)
    implementation(libs.modlauncher)
    implementation(libs.unsafe)
    implementation(projects.eventbusTestJar)

    implementation libs.jmh.core
    runtimeOnly libs.jmh.annotationProcessor
    annotationProcessor libs.jmh.annotationProcessor
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
    automaticModule('org.openjdk.jmh:jmh-core', 'jmh.core')
    automaticModule('net.sf.jopt-simple:jopt-simple', 'jopt.simple')
}

tasks.register('aggregateJmh', AggregateJmh) {
    if (rootProject.file('jmh_data_input.json').exists())
        inputData = rootProject.file('jmh_data_input.json')
    timeUnit = 'ns'
    collate = !project.hasProperty('simpleBench')
    output = rootProject.file('jmh_results.md')
    outputData = rootProject.file('jmh_data_output.json')
    outputCsv = rootProject.file('jmh_data_output.csv')
}

tasks.register('archiveJfr', ArchiveJfr) {
    outputs.upToDateWhen { false }
    input = file("build/jmh_profile_results/last_run/")
    output = file('build/jmh_profile_results/archive/')
}

tasks.register('jmh') {
    dependsOn('aggregateJmh', 'archiveJfr')
}

((Map<String, List<Integer>>) ext.VALID_VMS).forEach { javaVendor, javaVersions ->
    for (Integer javaVersion in javaVersions) {
        var output = file("build/jmh_results/jmh-${javaVendor}-${javaVersion}.json")
        var outputJfr = file("build/jmh_profile_results/last_run/${javaVendor}-${javaVersion}/")
        outputJfr.mkdirs()
        var task = tasks.register("jmh${javaVendor}${javaVersion}", JavaExec) {
            classpath = sourceSets.main.runtimeClasspath
            mainModule = 'net.minecraftforge.eventbus.jmh'
            mainClass = 'net.minecraftforge.eventbus.benchmarks.Main'
            modularity.inferModulePath = true
            systemProperty 'jmh.ignoreLock', 'true'
            jvmArgs += '-Xmx8g' // Some tests are fast enough that they generate millions of class files, so, give more memory
            args = [
                    '-bm', 'AverageTime',  // Benchmark mode. Available modes are: [Throughput, AverageTime, SampleTime, SingleShotTime, All]
                    '-r',  '5s',  // Minimum iteration time
                    '-w',  '5s',  // Minimum warmup time
                    '-wi', '2',   // Warmup iterations, Only 2 because running all benchmarks takes a long time
                    '-i',  '5',   // Iterations
                    '-tu', 'ns',  // Time unit: [m, s, ms, us, ns]
                    '-f',  '1',   // Forks per benchmark
                    '-rf', 'json', // Results File Format
//                    '-prof', 'stack', // Profiler: Simple and naive Java stack profiler
//                    '-prof', "jfr:dir=${outputJfr}", // Profiler: Java Flight Recorder profiler
                    '-v', 'EXTRA', // Verbosity [SILENT, NORMAL, EXTRA]
                    '-foe', 'true', // Fail on error
                    '-rff', output,
            ]
            if (project.hasProperty('bench'))
                args += project.property('bench')

            doFirst {
                outputJfr.deleteDir()
                if (!output.parentFile.exists())
                    output.parentFile.mkdirs()
                if (output.exists())
                    output.delete()
            }
            javaLauncher = javaToolchains.launcherFor {
                vendor = JvmVendorSpec."${javaVendor.toUpperCase(Locale.ROOT)}" as JvmVendorSpec
                languageVersion = JavaLanguageVersion.of(javaVersion)
                implementation = JvmImplementation.VENDOR_SPECIFIC
            }
        }
        tasks.named('aggregateJmh') {
            dependsOn task
            inputs.file output
        }
        tasks.named('archiveJfr') {
            dependsOn task
            inputs.dir outputJfr
        }
    }
}
