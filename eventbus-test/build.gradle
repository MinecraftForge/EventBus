plugins {
    id 'eclipse'
    id 'java-library'
    id 'net.minecraftforge.gradleutils'
    id 'net.minecraftforge.licenser'
    id 'org.gradlex.extra-java-module-info'
    id 'test-report-aggregation'
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
}

license {
    header = rootProject.file("LICENSE-header.txt")
}

dependencies {
    testImplementation(rootProject)
    testImplementation(projects.eventbusTestJar)
    testImplementation(libs.junit.api)
    testImplementation(libs.securemodules)
    testImplementation(libs.modlauncher)
    testImplementation(libs.unsafe)
    testImplementation(libs.asm)
    testImplementation(libs.asm.tree)
    testImplementation(libs.jopt.simple)
    testImplementation(libs.log4j.api)
    testRuntimeOnly(libs.bundles.junit.runtime)
    testCompileOnly(libs.nulls)
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
    automaticModule('net.sf.jopt-simple:jopt-simple', 'jopt.simple')
}

tasks.register('testAll', AggregateTest) {
    input = file('build/test-results/')
    output = rootProject.file('test_results.html')
}

VALID_VMS.each { javaVendor, javaVersions ->
    javaVersions.each { javaVersion ->
        def output = file("build/test-results/${javaVendor}-${javaVersion}/")
        output.mkdirs()
        def task = tasks.register("test${javaVendor}${javaVersion}", Test) {
            useJUnitPlatform()
            javaLauncher.set(javaToolchains.launcherFor {
                it.vendor.set(JvmVendorSpec."${javaVendor.toUpperCase(Locale.ROOT)}" as JvmVendorSpec)
                it.languageVersion.set(JavaLanguageVersion.of(javaVersion))
                it.implementation.set(JvmImplementation.VENDOR_SPECIFIC)
            })
            reports.html.destination = file("build/test-reports/${javaVendor}-${javaVersion}/")
            reports.junitXml.destination = output
        }
        testAll.inputs.dir(output)
        testAll.dependsOn(task)
        testAll.mustRunAfter(task)
    }
}

// Hack eclipse into knowing that the gradle deps are modules
eclipse.classpath {
    containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
    file.whenMerged { entries.findAll { it.kind == 'lib' || it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each { it.entryAttributes['module'] = 'true' } }
}
