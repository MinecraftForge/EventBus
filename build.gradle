import net.minecraftforge.gradleutils.PomUtils
import net.ltgt.gradle.errorprone.ErrorProneOptions
import net.ltgt.gradle.nullaway.NullAwayOptions

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.gradlex.extra-java-module-info' version '1.11'
    id 'net.minecraftforge.gradleutils' version '2.4.13'
    id 'net.minecraftforge.licenser' version '1.1.1'

    // Enforce jSpecify annotations at compile-time
    id 'net.ltgt.errorprone' version '4.1.0'
    id 'net.ltgt.nullaway' version '2.2.0'
}

group = 'net.minecraftforge'
version = gitversion.version.tagOffset
print "Version: $version"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    modularity.inferModulePath = true
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    api libs.jspecify.annotations
    errorprone libs.errorprone.core
    errorprone libs.nullaway
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
}

changelog {
    from '1.0.0'
}

tasks.withType(JavaCompile).configureEach {
    // Set up compile-time enforcement of the jSpecify spec via ErrorProne and NullAway
    options.errorprone { ErrorProneOptions errorProne ->
        errorProne.disableAllChecks = true // Opt-into only the checks we care about

        // Enforce the jSpecify spec
        errorProne.nullaway { NullAwayOptions nullAway ->
            nullAway.jspecifyMode = true
            nullaway.onlyNullMarked = true // Only enforce nullability checks on @NullMarked classes and packages
            nullAway.error() // Throw a compile error on jSpecify spec violations
        }

        // Enforce the ErrorProne checks we care about
        errorProne.error("FieldCanBeFinal", "MethodCanBeStatic", "LambdaFunctionalInterface")
    }
}

tasks.named('jar', Jar) {
    manifest {
        attributes([
            'Specification-Title':   'EventBus',
            'Specification-Version':  gitversion.version.info.tag,
            'Specification-Vendor':   'Forge Development LLC',
            'Implementation-Title':   'EventBus',
            'Implementation-Version': project.version,
            'Implementation-Vendor':  'Forge Development LLC'
        ])
    }

    reproducibleFileOrder = true
    preserveFileTimestamps = false
}

license {
    header = file("LICENSE-header.txt")
    newLine = false
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java
        artifactId = 'eventbus'
        pom {
            name = 'EventBus'
            description = 'High performance Event Bus library'

            gradleutils.pom.gitHubDetails = pom

            license PomUtils.Licenses.LGPLv2_1

            developers {
                developer PomUtils.Developers.Paint_Ninja
            }
        }
    }

    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

allprojects {
    ext.VALID_VMS = [
        'Adoptium':  [21],
        'Amazon':    [21],
        'Azul':      (21),
        'BellSoft':  (21),
        'Graal_VM':  [21],
        'Microsoft': [21],
        'Oracle':    (21),
    ]

    // Tests are expensive to run all variants, so only run if asked to
    if (!project.hasProperty('bulk_tests'))
        ext.VALID_VMS = ['Adoptium':  [21]]
}
